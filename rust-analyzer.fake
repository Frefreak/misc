#!/usr/bin/env python

from pwn import process, context
import os
import sys
from threading import Thread
import json
import random

context.log_level = 'error'
def cpr(msg):
    if isinstance(msg, bytes):
        msg = msg.decode()
    print(f"\x1b[31;1m{msg}\x1b[0m")

def readline(io):
    while True:
        l = io.recvline().decode()
        if not l.startswith('Content-Length: '):
            print(f'\x1b[90;1m{l.strip()}\x1b[0m')
        else:
            size = int(l.split(': ')[1])
            print(f'size: {size}')
            io.recvn(2)
            l = io.recvn(size)
            print(json.dumps(json.loads(l), indent=2))
            break


def mk_req(method, params, id=True):
    data = {
        "jsonrpc": "2.0",
        "method": method,
        "params": params,
    }
    if id:
        data["id"] = random.randrange(100000)
    data = json.dumps(data)
    return f'Content-Length: {len(data)}' + '\r\n\r\n' + data

# io = process('./target/debug/rust-analyzer', shell=True)
io = process('/usr/bin/rust-analyzer', shell=True)

f = open('ra.log', 'a+')
def print_out(io):
    while True:
        try:
            l = io.recvline().decode()
            sz = int(l.split(': ')[1])
            io.recvn(2)
            cont = io.recvn(sz)
            print(l + '\r\n' + cont.decode(), end='')
            sys.stdout.flush()
            f.write('<--\n' + l + '\r\n' + cont.decode() + '\n' + '------\n')
            f.flush()
        except Exception as e:
            f.write(repr(e))
            f.flush()


Thread(target=print_out, args=(io,)).start()
while True:
    try:
        stage = 0
        l = sys.stdin.buffer.readline()
        assert l.startswith(b'Content-Length: ')
        sz = int(l.split(b': ')[1])
        sys.stdin.buffer.readline()
        cont = sys.stdin.buffer.read(sz)
        assert len(cont) == sz
        io.send(l + b'\r\n' + cont)
        f.write('-->\n' + l.decode() + '\n' + '\r\n' + cont.decode() + '\n' + '------\n')
        f.flush()
    except Exception as e:
        f.write(f'{repr(e)}\n')
