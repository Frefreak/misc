#!/usr/bin/env python

import os
import time
import argparse
import subprocess
from typing import Optional

gpu = "0000:01:00.0"
aud = "0000:01:00.1"
gpu_vd = (
    open(f"/sys/bus/pci/devices/{gpu}/vendor").read().strip()
    + " "
    + open(f"/sys/bus/pci/devices/{gpu}/device").read().strip()
)
aud_vd = (
    open(f"/sys/bus/pci/devices/{aud}/vendor").read().strip()
    + " "
    + open(f"/sys/bus/pci/devices/{aud}/device").read().strip()
)


def check_root():
    if os.geteuid() != 0:
        print("This script must be run as root")
        exit(1)


def get_bound_driver() -> Optional[str]:
    r = subprocess.check_output(f"lspci -nnk -d {gpu_vd.replace(' ', ':')}", shell=True)
    # get kernel driver in use
    driver = None
    for line in r.decode().split("\n"):
        if "Kernel driver in use" in line:
            driver = line.split(":")[1].strip()
            break

    if not driver:
        print("GPU is not bound to any driver")
    return driver


def check_no_running_processes():
    try:
        subprocess.check_call(
            'nvidia-smi | grep "No running processes found" > /dev/null', shell=True
        )
    except subprocess.CalledProcessError:
        print("Error: nvidia-smi reports running processes")
        subprocess.run(["nvidia-smi"])
        exit(1)


def bind_vfio():
    # make sure no processes are using nvidia with nvidia-smi
    check_no_running_processes()
    subprocess.run(["modprobe", "-r", "nvidia_drm"])
    subprocess.run(["modprobe", "-r", "nvidia_modeset"])
    subprocess.run(["modprobe", "-r", "nvidia_uvm"])
    subprocess.run(["modprobe", "-r", "nvidia"])
    time.sleep(3)
    # with open(f"/sys/bus/pci/devices/{gpu}/driver/unbind", "w") as f:
    #     f.write(gpu)
    # with open(f"/sys/bus/pci/devices/{aud}/driver/unbind", "w") as f:
    #     f.write(aud)
    with open("/sys/bus/pci/drivers/vfio-pci/new_id", "w") as f:
        f.write(gpu_vd)
    with open("/sys/bus/pci/drivers/vfio-pci/new_id", "w") as f:
        f.write(aud_vd)


def unbind_vfio():
    with open("/sys/bus/pci/drivers/vfio-pci/remove_id", "w") as f:
        f.write(gpu_vd)
    with open("/sys/bus/pci/drivers/vfio-pci/remove_id", "w") as f:
        f.write(aud_vd)
    with open(f"/sys/bus/pci/devices/{gpu}/remove", "w") as f:
        f.write("1")
    with open(f"/sys/bus/pci/devices/{aud}/remove", "w") as f:
        f.write("1")
    with open("/sys/bus/pci/rescan", "w") as f:
        f.write("1")


parser = argparse.ArgumentParser()
parser.add_argument("action", choices=["bind", "unbind", "chk"])


def main():
    args = parser.parse_args()
    driver = get_bound_driver()
    if args.action == "bind":
        check_root()
        if driver == "vfio-pci":
            print("Error: GPU is already bound to vfio-pci")
            exit(1)
        bind_vfio()
    elif args.action == "unbind":
        check_root()
        if driver != "vfio-pci":
            print("Error: GPU is not bound to vfio-pci")
            exit(1)
        unbind_vfio()
    elif args.action == "chk":
        print(driver)


if __name__ == "__main__":
    main()
