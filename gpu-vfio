#!/usr/bin/env python

import os
import argparse

# check root
if os.geteuid() != 0:
    print("This script must be run as root")
    exit(1)

gpu = "0000:01:00.0"
aud = "0000:01:00.1"
gpu_vd = (
    open(f"/sys/bus/pci/devices/{gpu}/vendor").read().strip()
    + " "
    + open(f"/sys/bus/pci/devices/{gpu}/device").read().strip()
)
aud_vd = (
    open(f"/sys/bus/pci/devices/{aud}/vendor").read().strip()
    + " "
    + open(f"/sys/bus/pci/devices/{aud}/device").read().strip()
)

def bind_vfio():
    os.system("modprobe -r nvidia_drm")
    os.system("modprobe -r nvidia_modeset")
    os.system("modprobe -r nvidia_uvm")
    os.system("modprobe -r nvidia")
    with open(f"/sys/bus/pci/devices/{gpu}/driver/unbind", "w") as f:
        f.write(gpu)
    with open(f"/sys/bus/pci/devices/{aud}/driver/unbind", "w") as f:
        f.write(aud)
    with open("/sys/bus/pci/drivers/vfio-pci/new_id", "w") as f:
        f.write(gpu_vd)
    with open("/sys/bus/pci/drivers/vfio-pci/new_id", "w") as f:
        f.write(aud_vd)

def unbind_vfio():
    with open("/sys/bus/pci/drivers/vfio-pci/remove_id", "w") as f:
        f.write(gpu_vd)
    with open("/sys/bus/pci/drivers/vfio-pci/remove_id", "w") as f:
        f.write(aud_vd)
    with open(f"/sys/bus/pci/devices/{gpu}/remove", "w") as f:
        f.write("1")
    with open(f"/sys/bus/pci/devices/{aud}/remove", "w") as f:
        f.write("1")
    with open("/sys/bus/pci/rescan", "w") as f:
        f.write("1")

parser = argparse.ArgumentParser()
parser.add_argument("action", choices=["bind", "unbind"])

def main():
    args = parser.parse_args()
    if args.action == "bind":
        bind_vfio()
    elif args.action == "unbind":
        unbind_vfio()
    else:
        parser.print_help()

if __name__ == "__main__":
    main()
